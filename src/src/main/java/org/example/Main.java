package org.example;

public class Main {
    //I replaced class Homework9 with Main
        public static int getTriangle(int n){
            return(n*(n+1))/2;
//Used to calculate the triangle number by multiplying by one term up then dividing by 2 to get the triangle num
        }


        public static int Divisors(int n){
            int count=0;
            for(int i=1;i<=Math.sqrt(n);i++){
                if(n%i==0){
                    if(n/1==i){
                        count=count++;
//The if statement checks if the divisors are equal to each other, if it is just count the one if not then count both of them
                    }
                    else{
                        count=count+2;
                    }
                }
            }
            return count;
        }
        public static void main(String[] args){
            int n=1;
            int num;

//This loop runs until the desired triangle num is found, and for 100 exactly it gives us 947376
            while(true){
                num=getTriangle(n);
                int divisor=Divisors(num);
                if(divisor==100){
                    System.out.println(num);
                    break;
                }
                n++;
            }
        }

        // ToDo 01:  Write an algorithm to solve the following problem
    /*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over one hundred divisors?

    */


    }
